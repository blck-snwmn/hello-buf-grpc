// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/hoge/v1/hoge.proto

package hoge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HogeServiceClient is the client API for HogeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HogeServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type hogeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHogeServiceClient(cc grpc.ClientConnInterface) HogeServiceClient {
	return &hogeServiceClient{cc}
}

func (c *hogeServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.hoge.v1.HogeService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HogeServiceServer is the server API for HogeService service.
// All implementations should embed UnimplementedHogeServiceServer
// for forward compatibility
type HogeServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// UnimplementedHogeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHogeServiceServer struct {
}

func (UnimplementedHogeServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

// UnsafeHogeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HogeServiceServer will
// result in compilation errors.
type UnsafeHogeServiceServer interface {
	mustEmbedUnimplementedHogeServiceServer()
}

func RegisterHogeServiceServer(s grpc.ServiceRegistrar, srv HogeServiceServer) {
	s.RegisterService(&HogeService_ServiceDesc, srv)
}

func _HogeService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HogeServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hoge.v1.HogeService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HogeServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HogeService_ServiceDesc is the grpc.ServiceDesc for HogeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HogeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.hoge.v1.HogeService",
	HandlerType: (*HogeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HogeService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hoge/v1/hoge.proto",
}
